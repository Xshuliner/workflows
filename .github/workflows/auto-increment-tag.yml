name: Auto Increment Tag

run-name: Auto Increment Tag

on:
  workflow_call:
    inputs:
      version_type:
        description: "Version increment type (major, feat, fix, repeat)"
        required: true
        type: string
        default: "fix"

      updatePackageJson:
        description: "Is update package json"
        required: false
        type: boolean
        default: false

    outputs:
      new_version:
        description: "The new version after increment"
        value: ${{ jobs.increment-tag.outputs.new_version }}

  workflow_dispatch:
    inputs:
      version_type:
        description: "Version increment type (major, feat, fix, repeat)"
        required: true
        type: choice
        default: "fix"
        options:
          - major
          - feat
          - fix
          - repeat

    updatePackageJson:
        description: "Is update package json"
        required: false
        type: boolean
        default: false

jobs:
  increment-tag:
    runs-on: ubuntu-latest

    outputs:
      new_version: ${{ steps.increment_version.outputs.new_version }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          LATEST_TAG=$(git tag -l --sort=-v:refname | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

          echo "=== [Get latest tag][result] LATEST_TAG: $LATEST_TAG ==="

      - name: Increment version
        id: increment_version
        run: |
          echo "=== [Increment version][params] version_type: ${{ inputs.version_type }} ==="

          VERSION=$(echo ${{ steps.get_tag.outputs.latest_tag }} | sed 's/^v//;s/v//g')
          MAJOR=$(echo $VERSION | cut -d. -f1 || echo 0)
          FEAT=$(echo $VERSION | cut -d. -f2 || echo 0)
          FIX=$(echo $VERSION | cut -d. -f3 || echo 0)

          if [ "${{ inputs.version_type }}" == "repeat" ]; then
            NEW_VERSION="${{ steps.get_tag.outputs.latest_tag }}"
          elif [ "${{ inputs.version_type }}" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            FEAT=0
            FIX=0
            NEW_VERSION="v${MAJOR}.${FEAT}.${FIX}"
          elif [ "${{ inputs.version_type }}" == "feat" ]; then
            FEAT=$((FEAT + 1))
            FIX=0
            NEW_VERSION="v${MAJOR}.${FEAT}.${FIX}"
          else
            FIX=$((FIX + 1))
            NEW_VERSION="v${MAJOR}.${FEAT}.${FIX}"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          echo "=== [Increment version][result] NEW_VERSION: $NEW_VERSION ==="

      - name: Update package.json version
        if: ${{ inputs.updatePackageJson }}
        run: |
          NEW_VERSION="${{ steps.increment_version.outputs.new_version }}"
          # 去掉v前缀
          NEW_VERSION_NO_V=${NEW_VERSION#v}
          jq --arg v "$NEW_VERSION_NO_V" '.version = $v' package.json > tmp.json && mv tmp.json package.json
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION_NO_V [skip ci]"
          git push

      - name: Create new tag
        if: ${{ inputs.version_type != 'repeat' }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.increment_version.outputs.new_version }}
          git push origin ${{ steps.increment_version.outputs.new_version }}
