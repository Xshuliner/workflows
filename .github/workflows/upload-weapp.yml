name: Upload Weapp

run-name: Upload Weapp

on:
  workflow_call:
    inputs:
      env:
        description: "Environment type (prod, uat)"
        required: true
        type: string
        default: "prod"

      version:
        description: "Version"
        required: true
        type: string
        default: "--"

      download_artifact_name:
        description: "Download artifact name"
        required: true
        type: string
        default: "artifact_name"

      app_id:
        description: "Weapp AppId"
        required: true
        type: string
        
      private_key:
        description: "Weapp Private Key"
        required: true
        type: string

      project_name:
        description: "Project name"
        required: false
        type: string
        default: ""

      desc:
        description: "Desc"
        required: false
        type: string
        default: ""

    outputs:
      preview_url:
        description: "Preview URL for the uploaded HTML"
        value: ${{ jobs.upload.outputs.preview_url }}
      repository_path:
        description: "Repository path on server"
        value: ${{ jobs.upload.outputs.repository_path }}

jobs:
  upload:
    runs-on: ubuntu-latest
    outputs:
      preview_url: ${{ steps.repo.outputs.preview_url }}
      repository_path: ${{ steps.repo.outputs.repository_path }}

    steps:
      - name: Download previous artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.download_artifact_name }}
          path: dist/

      - name: Get repository name
        id: repo
        run: |
          if [ -n "${{ inputs.project_name }}" ]; then
            REPO_NAME="${{ inputs.project_name }}"
          else
            REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          fi

          if [ "${{ inputs.env }}" = "prod" ]; then
            REPO_PATH=""
            PREVIEW_URL="https://www.xshuliner.online/$REPO_NAME"
          else
            REPO_PATH=""
            PREVIEW_URL="https://www.xshuliner.online/${{ inputs.env }}/$REPO_NAME"
          fi

          echo "project_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "repository_path=$REPO_PATH" >> $GITHUB_OUTPUT
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

      - name: Console params
        run: |
          echo "=== [Console params][params] env: ${{ inputs.env }} ==="
          echo "=== [Console params][params] project_name: ${{ inputs.project_name }} ==="
          echo "=== [Console params][params] app_id: ${{ inputs.app_id }} ==="
          echo "=== [Console params][params] private_key: ${{ inputs.private_key }} ==="
          echo "=== [Console params][params] download_artifact_name: ${{ inputs.download_artifact_name }} ==="
          echo "=== [Console params][secrets] SSH_HOST: ${{ secrets.SSH_HOST }} ==="
          echo "=== [Console params][secrets] SSH_PORT: ${{ secrets.SSH_PORT }} ==="
          echo "=== [Console params][secrets] SSH_USERNAME: ${{ secrets.SSH_USERNAME }} ==="
          echo "=== [Console params][secrets] SSH_KEY: ${{ secrets.SSH_KEY }} ==="
          echo "=== [Console params][outputs] project_name: ${{ steps.repo.outputs.project_name }} ==="
          echo "=== [Console params][outputs] repository_path: ${{ steps.repo.outputs.repository_path }} ==="
          echo "=== [Console params][outputs] preview_url: ${{ steps.repo.outputs.preview_url }} ==="

          echo "======"

      - name: Prepare desc
        id: desc
        run: |
          DESC="**Commit**: ${{ github.sha }}"
          DESC="$DESC\n**Branch**: ${{ github.ref_name }}"
          DESC="$DESC\n**Actor**: ${{ github.actor }}"
          DESC="$DESC\n${{ inputs.desc }}"
          echo "DESC_WITH_INFO<<EOF" >> $GITHUB_ENV
          echo -e "$DESC" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Write private.key
        run: |
          echo "${{ inputs.private_key }}" > private.key

      - name: Upload files
        env:
          app_id: ${{ inputs.app_id }}
        run: |
          npx miniprogram-ci upload \
            --project-path dist/ \
            --appid ${{ inputs.app_id }} \
            --private-key-path ./private.key \
            --type miniProgram \
            --version ${{ inputs.version }} \
            --desc "${DESC_WITH_INFO}"

      - name: Console Url
        run: |
          TIMESTAMP=$(date +%s)
          echo "=== [Console Url]: ${{ steps.repo.outputs.preview_url }}?t=$TIMESTAMP ==="

      - name: Report API for success
        if: inputs.env == 'prod'
        run: |
          # 设置重试次数和间隔
          MAX_RETRIES=3
          RETRY_INTERVAL=5
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "=== 尝试发送报告 (第 $((RETRY_COUNT + 1)) 次) ==="
            
            # 发送请求并保存响应
            RESPONSE=$(curl -s -w "\n%{http_code}" 'https://www.xshuliner.online/api/smart/v1/html/postCreateHtml' \
              -H 'Content-Type: application/json' \
              -H 'authorization: Bearer html-report-key-0000001' \
              -H 'brand: page' \
              -H 'platform: WEB' \
              --data-raw '{
                "projectName": "'${{ steps.repo.outputs.project_name }}'",
                "version": "'${{ inputs.version }}'",
                "repositoryUrl": "'${{ github.server_url }}/${{ github.repository }}'",
                "previewUrl": "'${{ steps.repo.outputs.preview_url }}'",
                "ref": "${{ github.ref }}",
                "sha": "${{ github.sha }}",
                "actor": "${{ github.actor }}",
                "content": "{}"
              }')
            
            # 分离响应内容和状态码
            HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
            RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')
            
            echo "=== 响应状态码: $HTTP_STATUS ==="
            echo "=== 响应内容: $RESPONSE_BODY ==="
            
            # 检查是否成功
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "=== 报告发送成功 ==="
              exit 0
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "=== 发送失败，${RETRY_INTERVAL}秒后重试... ==="
                sleep $RETRY_INTERVAL
              else
                echo "=== 达到最大重试次数，报告发送失败 ==="
                exit 1
              fi
            fi
          done
