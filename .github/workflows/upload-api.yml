name: Upload Api

run-name: Upload Api

on:
  workflow_call:
    inputs:
      env:
        description: "Environment type (prod, uat)"
        required: true
        type: string
        default: "prod"

      version:
        description: "Version"
        required: true
        type: string
        default: "--"

      download_artifact_name:
        description: "Download artifact name"
        required: true
        type: string
        default: "artifact_name"

      project_name:
        description: "Project name"
        required: false
        type: string
        default: ""

      code_path:
        description: "Code path"
        required: false
        type: string
        default: ""

      rm:
        description: "rm for scp params"
        required: false
        type: boolean
        default: true

      strip_components:
        description: "strip_components for scp params"
        required: false
        type: number
        default: 1

    outputs:
      preview_url:
        description: "Preview URL for the uploaded HTML"
        value: ${{ jobs.upload.outputs.preview_url }}
      repository_path:
        description: "Repository path on server"
        value: ${{ jobs.upload.outputs.repository_path }}

    secrets:
      SSH_HOST:
        required: true
      SSH_PORT:
        required: true
      SSH_USERNAME:
        required: true
      SSH_KEY:
        required: true
      SERVER_API:
        required: true

jobs:
  upload:
    runs-on: ubuntu-latest
    outputs:
      preview_url: ${{ steps.repo.outputs.preview_url }}
      repository_path: ${{ steps.repo.outputs.repository_path }}

    steps:
      - name: Download previous artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.download_artifact_name }}
          path: dist/

      - name: Get repository name
        id: repo
        run: |
          if [ -n "${{ inputs.project_name }}" ]; then
            REPO_NAME="${{ inputs.project_name }}"
          else
            REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          fi

          REPO_PATH="${{ secrets.SERVER_API }}/${{ inputs.env }}/$REPO_NAME"

          if [ "${{ inputs.env }}" = "prod" ]; then
            PREVIEW_URL="https://www.xshuliner.online/api/smart/swagger"
          else
            PREVIEW_URL="https://www.xshuliner.online/apiuat/smart/swagger"
          fi

          echo "project_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "repository_path=$REPO_PATH" >> $GITHUB_OUTPUT
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

      - name: Console params
        run: |
          echo "=== [Console params][params] env: ${{ inputs.env }} ==="
          echo "=== [Console params][params] project_name: ${{ inputs.project_name }} ==="
          echo "=== [Console params][params] rm: ${{ inputs.rm }} ==="
          echo "=== [Console params][params] strip_components: ${{ inputs.strip_components }} ==="
          echo "=== [Console params][params] download_artifact_name: ${{ inputs.download_artifact_name }} ==="
          echo "=== [Console params][secrets] SSH_HOST: ${{ secrets.SSH_HOST }} ==="
          echo "=== [Console params][secrets] SSH_PORT: ${{ secrets.SSH_PORT }} ==="
          echo "=== [Console params][secrets] SSH_USERNAME: ${{ secrets.SSH_USERNAME }} ==="
          echo "=== [Console params][secrets] SSH_KEY: ${{ secrets.SSH_KEY }} ==="
          echo "=== [Console params][outputs] project_name: ${{ steps.repo.outputs.project_name }} ==="
          echo "=== [Console params][outputs] repository_path: ${{ steps.repo.outputs.repository_path }} ==="
          echo "=== [Console params][outputs] preview_url: ${{ steps.repo.outputs.preview_url }} ==="

          echo "======"

      - name: Upload files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: dist/
          target: ${{ steps.repo.outputs.repository_path }}
          rm: ${{ inputs.rm }}
          strip_components: ${{ inputs.strip_components }}

      - name: Deploy and Restart with PM2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ${{ steps.repo.outputs.repository_path }}${{ inputs.code_path }}

            yarn install

            # 确保 pm2 已安装
            if ! command -v pm2 >/dev/null 2>&1; then
              echo "pm2 未安装，正在全局安装 pm2..."
              yarn global add pm2
            fi

            # 根据环境删除并启动对应 pm2 进程
            if [ "${{ inputs.env }}" = "prod" ]; then
              if pm2 list | grep -q smartProd; then
                echo "删除已存在的 smartProd 进程 start"
                pm2 delete smartProd
                echo "删除已存在的 smartProd 进程 done"
              fi
              echo "启动 smartProd 进程 start"
              pm2 start npm --name smartProd -- run start:prod
              echo "启动 smartProd 进程 done"
            else
              if pm2 list | grep -q smartUat; then
                echo "删除已存在的 smartUat 进程 start"
                pm2 delete smartUat
                echo "删除已存在的 smartUat 进程 done"
              fi
              echo "启动 smartUat 进程 start"
              pm2 start npm --name smartUat -- run start:uat
              echo "启动 smartUat 进程 done"
            fi

            pm2 save --force
            pm2 startup

      - name: Console Url
        run: |
          TIMESTAMP=$(date +%s)
          echo "=== [Console Url]: ${{ steps.repo.outputs.preview_url }}?t=$TIMESTAMP ==="

      - name: Report API for success
        if: inputs.env == 'prod'
        run: |
          # 设置重试次数和间隔
          MAX_RETRIES=3
          RETRY_INTERVAL=5
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "=== 尝试发送报告 (第 $((RETRY_COUNT + 1)) 次) ==="
            
            # 发送请求并保存响应
            RESPONSE=$(curl -s -w "\n%{http_code}" 'https://www.xshuliner.online/api/smart/v1/html/postCreateHtml' \
              -H 'Content-Type: application/json' \
              -H 'authorization: Bearer html-report-key-0000001' \
              -H 'brand: page' \
              -H 'platform: WEB' \
              --data-raw '{
                "projectName": "'${{ steps.repo.outputs.project_name }}'",
                "version": "'${{ inputs.version }}'",
                "repositoryUrl": "'${{ github.server_url }}/${{ github.repository }}'",
                "previewUrl": "'${{ steps.repo.outputs.preview_url }}'",
                "ref": "${{ github.ref }}",
                "sha": "${{ github.sha }}",
                "actor": "${{ github.actor }}",
                "content": "{}"
              }')
            
            # 分离响应内容和状态码
            HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
            RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')
            
            echo "=== 响应状态码: $HTTP_STATUS ==="
            echo "=== 响应内容: $RESPONSE_BODY ==="
            
            # 检查是否成功
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "=== 报告发送成功 ==="
              exit 0
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "=== 发送失败，${RETRY_INTERVAL}秒后重试... ==="
                sleep $RETRY_INTERVAL
              else
                echo "=== 达到最大重试次数，报告发送失败 ==="
                exit 1
              fi
            fi
          done
