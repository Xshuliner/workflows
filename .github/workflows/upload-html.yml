name: Upload Html

run-name: Upload Html

on:
  workflow_call:
    inputs:
      env:
        description: "Environment type (prod, uat)"
        required: true
        type: string
        default: "prod"

      version:
        description: "Version"
        required: true
        type: string
        default: "--"

      repository_name:
        description: "Repository name"
        required: false
        type: string
        default: ""

      rm:
        description: "rm for scp params"
        required: true
        type: boolean
        default: true

      strip_components:
        description: "strip_components for scp params"
        required: true
        type: number
        default: 1

      download_dist_name:
        description: "download dist name"
        required: true
        type: string
        default: "dist"

    secrets:
      SSH_HOST:
        required: true
      SSH_PORT:
        required: true
      SSH_USERNAME:
        required: true
      SSH_KEY:
        required: true
      SERVER_HTML:
        required: true
      QYWX_WEBHOOK:
        required: true

jobs:
  upload:
    runs-on: ubuntu-latest

    steps:
      - name: Download previous artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.download_dist_name }}
          path: dist/

      - name: Get repository name
        id: repo
        run: |
          if [ -n "${{ inputs.repository_name }}" ]; then
            REPO_NAME="${{ inputs.repository_name }}"
          else
            REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          fi

          if [ "${{ github.repository }}" = "Xshuliner/project-pages" ] && [ "${{ inputs.env }}" = "prod" ]; then
            REPO_PATH="${{ secrets.SERVER_HTML }}"
            REPO_URL="https://orz2.online"
          else
            if [ "${{ inputs.env }}" = "prod" ]; then
              REPO_PATH="${{ secrets.SERVER_HTML }}/$REPO_NAME"
              REPO_URL="https://orz2.online/$REPO_NAME"
            else
              REPO_PATH="${{ secrets.SERVER_HTML }}/${{ inputs.env }}/$REPO_NAME"
              REPO_URL="https://orz2.online/${{ inputs.env }}/$REPO_NAME"
            fi
          fi

          echo "repository_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "repository_path=$REPO_PATH" >> $GITHUB_OUTPUT
          echo "repository_url=$REPO_URL" >> $GITHUB_OUTPUT

      - name: Console params
        run: |
          echo "=== [Console params][params] env: ${{ inputs.env }} ==="
          echo "=== [Console params][params] repository_name: ${{ inputs.repository_name }} ==="
          echo "=== [Console params][params] rm: ${{ inputs.rm }} ==="
          echo "=== [Console params][params] strip_components: ${{ inputs.strip_components }} ==="
          echo "=== [Console params][params] download_dist_name: ${{ inputs.download_dist_name }} ==="
          echo "=== [Console params][secrets] SSH_HOST: ${{ secrets.SSH_HOST }} ==="
          echo "=== [Console params][secrets] SSH_PORT: ${{ secrets.SSH_PORT }} ==="
          echo "=== [Console params][secrets] SSH_USERNAME: ${{ secrets.SSH_USERNAME }} ==="
          echo "=== [Console params][secrets] SSH_KEY: ${{ secrets.SSH_KEY }} ==="
          echo "=== [Console params][outputs] repository_name: ${{ steps.repo.outputs.repository_name }} ==="
          echo "=== [Console params][outputs] repository_path: ${{ steps.repo.outputs.repository_path }} ==="
          echo "=== [Console params][outputs] repository_url: ${{ steps.repo.outputs.repository_url }} ==="

          echo "======"

      - name: Upload files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: dist/
          target: ${{ steps.repo.outputs.repository_path }}
          rm: ${{ inputs.rm }}
          strip_components: ${{ inputs.strip_components }}

      - name: Console Url
        run: |
          TIMESTAMP=$(date +%s)
          echo "=== [Console Url]: ${{ steps.repo.outputs.repository_url }}?t=$TIMESTAMP ==="

      - name: Report API for success
        if: inputs.env == 'prod'
        run: |
          # 设置重试次数和间隔
          MAX_RETRIES=3
          RETRY_INTERVAL=5
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "=== 尝试发送报告 (第 $((RETRY_COUNT + 1)) 次) ==="
            
            # 发送请求并保存响应
            RESPONSE=$(curl -s -w "\n%{http_code}" 'https://www.orz2.online/api/smart/v1/html/postCreateHtml' \
              -H 'Content-Type: application/json' \
              -H 'authorization: Bearer html-report-key-0000001' \
              -H 'brand: page' \
              -H 'platform: WEB' \
              --data-raw '{
                "projectName": "'${{ steps.repo.outputs.repository_name }}'",
                "content": "[{\"version\":\"${{ inputs.version }}\",\"url\":\"${{ steps.repo.outputs.repository_url }}\"}]"
              }')
            
            # 分离响应内容和状态码
            HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
            RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')
            
            echo "=== 响应状态码: $HTTP_STATUS ==="
            echo "=== 响应内容: $RESPONSE_BODY ==="
            
            # 检查是否成功
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "=== 报告发送成功 ==="
              exit 0
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "=== 发送失败，${RETRY_INTERVAL}秒后重试... ==="
                sleep $RETRY_INTERVAL
              else
                echo "=== 达到最大重试次数，报告发送失败 ==="
                exit 1
              fi
            fi
          done

      - name: Report QW for success
        run: |
          # 获取东八区时间
          TIMESTAMP=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')

          # 构建消息内容
          MESSAGE='{
            "msgtype": "template_card",
            "template_card": {
              "card_type": "text_notice",
              "source": {
                "icon_url": "http://oss.orz2.online/Xshuliner/common/logo.jpg",
                "desc": "部署成功"
              },
              "main_title": {
                "title": "项目名称",
                "desc": "${{ github.repository }}"
              },
              "emphasis_content": {
                "title": "${{ inputs.version }}",
                "desc": "版本号"
              },
              "horizontal_content_list": [
                {
                  "keyname": "环境",
                  "value": "${{ inputs.env }}"
                },
                {
                  "keyname": "预览地址",
                  "value": "${{ steps.repo.outputs.repository_url }}"
                },
                {
                  "keyname": "部署时间",
                  "value": "'$TIMESTAMP'"
                }
              ],
              "jump_list": [
                {
                  "type": 1,
                  "title": "查看预览",
                  "url": "${{ steps.repo.outputs.repository_url }}"
                }
              ],
              "card_action": {
                "type": 1,
                "url": "${{ steps.repo.outputs.repository_url }}"
              }
            }
          }'

          # 发送消息到企业微信
          curl -H 'Content-Type: application/json' \
               -X POST \
               -d "$MESSAGE" \
               ${{ secrets.QYWX_WEBHOOK }}
